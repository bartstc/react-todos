{"version":3,"sources":["components/ItemsToDo.js","components/TodoItem.js","components/CheckAll.js","components/TodoFilter.js","components/AddItem.js","components/App.js","serviceWorker.js","index.js"],"names":["ItemsToDo","props","react_default","a","createElement","itemsToDoCount","TodoItem","todo","index","checkTodo","editTodo","doneEdit","cancelEdit","deleteTodo","_props$todo","id","completed","editing","title","key","className","onChange","type","checked","onClick","autoFocus","defaultValue","onBlur","e","onKeyUp","CheckAll","checkAllTodos","anyChecked","TodoFilter","updateFilter","filter","undefined","AddItem","handleChange","addTodo","name","value","inputValue","App","state","beforeEditCache","uuid","todos","_this","setState","Object","defineProperty","target","newItem","concat","toConsumableArray","prevState","splice","persist","trim","length","todosCompletedCount","clearCompleted","filterTodos","forEach","_this2","this","components_AddItem","react_addons_css_transition_group_default","transitionName","transitionEnterTimeout","transitionLeaveTimeout","map","components_TodoItem","react","components_CheckAll","components_ItemsToDo","components_TodoFilter","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.163335a2.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ItemsToDo = props => {\r\n  return (\r\n    <div>\r\n      {props.itemsToDoCount} items left\r\n    </div>\r\n  );\r\n};\r\n\r\nItemsToDo.propTypes = {\r\n  itemsToDoCount: PropTypes.number.isRequired\r\n};\r\n\r\nexport default ItemsToDo;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst TodoItem = props => {\r\n  const { todo, index, checkTodo, editTodo, doneEdit, cancelEdit, deleteTodo } = props;\r\n  const { id, completed, editing, title } = props.todo;\r\n\r\n  return (\r\n    <div key={id} className=\"todo-item\">\r\n      <div className=\"todo-item-left\">\r\n        <input\r\n          onChange={() => checkTodo(todo, index)}\r\n          type=\"checkbox\"\r\n          className=\"todo-item-done\"\r\n          checked={completed}\r\n        />\r\n\r\n        {!editing &&\r\n          <div\r\n            className={completed ? 'todo-item-label completed' : 'todo-item-label'}\r\n            onClick={() => editTodo(todo, index)}\r\n          >\r\n            {title}\r\n          </div>\r\n        }\r\n        {editing &&\r\n          <input\r\n            className=\"todo-item-edit\"\r\n            type=\"text\"\r\n            autoFocus\r\n            defaultValue={title}\r\n            onBlur={(e) => doneEdit(todo, index, e)}\r\n            onKeyUp={(e) => {\r\n              if (e.key === 'Enter') {\r\n                doneEdit(todo, index, e);\r\n              } else if (e.key === 'Escape') {\r\n                cancelEdit(todo, index);\r\n              };\r\n            }} />\r\n        }\r\n      </div>\r\n      <div onClick={() => deleteTodo(props.todo.id)} className=\"remove-item\">\r\n        &times;\r\n              </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired,\r\n  index: PropTypes.number.isRequired,\r\n  checkTodo: PropTypes.func.isRequired,\r\n  editTodo: PropTypes.func.isRequired,\r\n  cancelEdit: PropTypes.func.isRequired,\r\n  deleteTodo: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default TodoItem;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CheckAll = props => {\r\n  return (\r\n    <label className=\"extra-container-label\">\r\n      <input\r\n        className=\"todo-item-done\"\r\n        type=\"checkbox\"\r\n        onChange={props.checkAllTodos}\r\n        checked={!props.anyChecked()} />Check All\r\n    </label>\r\n  );\r\n};\r\n\r\nCheckAll.propTypes = {\r\n  checkAllTodos: PropTypes.func.isRequired,\r\n  anyChecked: PropTypes.func.isRequired\r\n};\r\n\r\nexport default CheckAll;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst TodoFilter = props => {\r\n  const { updateFilter, filter } = props;\r\n\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={() => updateFilter('all')}\r\n        className={(filter === 'all') ? \"active\" : undefined}>All\r\n      </button>\r\n      <button\r\n        onClick={() => updateFilter('active')}\r\n        className={(filter === 'active') ? \"active\" : undefined}>Active\r\n      </button>\r\n      <button\r\n        onClick={() => updateFilter('completed')}\r\n        className={(filter === 'completed') ? \"active\" : undefined}>Completed\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nTodoFilter.propTypes = {\r\n  updateFilter: PropTypes.func.isRequired,\r\n  filter: PropTypes.string.isRequired\r\n};\r\n\r\nexport default TodoFilter;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddItem = props => {\r\n  return (\r\n    <input\r\n      onChange={props.handleChange}\r\n      onKeyUp={props.addTodo}\r\n      name=\"inputValue\"\r\n      value={props.inputValue}\r\n      type=\"text\"\r\n      className=\"todo-input\"\r\n    />\r\n  );\r\n};\r\n\r\nAddItem.propTypes = {\r\n  handleChange: PropTypes.func.isRequired,\r\n  addTodo: PropTypes.func.isRequired,\r\n  inputValue: PropTypes.string.isRequired\r\n};\r\n\r\nexport default AddItem;","import React, { Component, Fragment } from 'react';\nimport uuid from 'uuid';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport '../App.css';\n\nimport ItemsToDo from './ItemsToDo';\nimport TodoItem from './TodoItem';\nimport CheckAll from './CheckAll';\nimport TodoFilter from './TodoFilter';\nimport AddItem from './AddItem';\n\nclass App extends Component {\n  state = {\n    filter: 'all',\n    beforeEditCache: '',\n    inputValue: '',\n    id: uuid(),\n    todos: []\n  };\n\n  handleChange = e => this.setState({ [e.target.name]: e.target.value });\n\n  addTodo = e => {\n    if (e.key === 'Enter') {\n      const value = this.state.inputValue;\n      if (!value) return;\n\n      const newItem = {\n        id: this.state.id,\n        title: value,\n        completed: false,\n        editing: false\n      };\n\n      const todos = [...this.state.todos, newItem];\n      this.setState({\n        todos,\n        id: uuid(),\n        inputValue: ''\n      });\n    };\n  };\n\n  deleteTodo = id => this.setState({ todos: this.state.todos.filter(todo => todo.id !== id) });\n\n  checkTodo = (todo, index) => {\n    this.setState((prevState) => {\n      let todos = prevState.todos;\n      todo.completed = !todo.completed;\n      todos.splice(index, 1, todo);\n\n      return { todos };\n    });\n  };\n\n  editTodo = (todo, index) => {\n    this.setState((prevState) => {\n      let todos = prevState.todos;\n      todo.editing = true;\n      todos.splice(index, 1, todo);\n\n      return { todos, beforeEditCache: todo.title };\n    });\n  };\n\n  doneEdit = (todo, index, e) => {\n    e.persist();\n\n    this.setState((prevState) => {\n      let todos = prevState.todos;\n      todo.editing = false;\n\n      if (e.target.value.trim().length === 0) {\n        todo.title = prevState.beforeEditCache;\n      } else {\n        todo.title = e.target.value;\n      };\n\n      todos.splice(index, 1, todo);\n\n      return { todos };\n    });\n  };\n\n  cancelEdit = (todo, index) => {\n    this.setState((prevState) => {\n      let todos = prevState.todos;\n      todo.title = prevState.beforeEditCache;\n      todo.editing = false;\n\n      todos.splice(index, 1, todo);\n\n      return { todos };\n    });\n  };\n\n  itemsToDoCount = () => this.state.todos.filter(todo => !todo.completed).length;\n\n  todosCompletedCount = () => this.state.todos.filter(todo => todo.completed).length;\n\n  clearCompleted = () => this.setState({ todos: this.state.todos.filter(todo => !todo.completed) });\n\n  updateFilter = filter => this.setState({ filter });\n\n  filterTodos = () => {\n    if (this.state.filter === 'all') {\n      return this.state.todos;\n    } else if (this.state.filter === 'active') {\n      return this.state.todos.filter(todo => !todo.completed);\n    } else if (this.state.filter === 'completed') {\n      return this.state.todos.filter(todo => todo.completed);\n    }\n\n    return this.state.todos;\n  };\n\n  checkAllTodos = (e) => {\n    e.persist();\n    this.setState((prevState) => {\n      let todos = prevState.todos;\n      todos.forEach(todo => todo.completed = e.target.checked);\n\n      return { todos };\n    });\n  };\n\n  anyChecked = () => this.itemsToDoCount() !== 0;\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Todo-container\">\n          <h1 className=\"heading\">Todo</h1>\n\n          <AddItem\n            handleChange={this.handleChange}\n            addTodo={this.addTodo}\n            inputValue={this.state.inputValue}\n          />\n\n          <ReactCSSTransitionGroup\n            transitionName=\"fade\"\n            transitionEnterTimeout={200}\n            transitionLeaveTimeout={200}>\n            {this.filterTodos().map((todo, index) => (\n              <TodoItem\n                key={todo.id}\n                todo={todo}\n                index={index}\n                checkTodo={this.checkTodo}\n                editTodo={this.editTodo}\n                doneEdit={this.doneEdit}\n                cancelEdit={this.cancelEdit}\n                deleteTodo={this.deleteTodo}\n              />\n            ))}\n          </ReactCSSTransitionGroup>\n\n          {this.state.todos.length !== 0 &&\n            <Fragment>\n              <div className=\"extra-container\">\n                <CheckAll\n                  checkAllTodos={this.checkAllTodos}\n                  anyChecked={this.anyChecked}\n                />\n                <ItemsToDo\n                  itemsToDoCount={this.itemsToDoCount()}\n                />\n              </div>\n\n              <div className=\"extra-container\">\n                <TodoFilter\n                  updateFilter={this.updateFilter}\n                  filter={this.state.filter}\n                />\n\n                <ReactCSSTransitionGroup\n                  transitionName=\"fade\"\n                  transitionEnterTimeout={200}\n                  transitionLeaveTimeout={200}>\n                  {this.todosCompletedCount() > 0 &&\n                    <div>\n                      <button onClick={this.clearCompleted}>Clear Completed</button>\n                    </div>\n                  }\n                </ReactCSSTransitionGroup>\n              </div>\n            </Fragment>\n          }\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}